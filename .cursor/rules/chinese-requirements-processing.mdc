---
description: 
globs: 
alwaysApply: false
---
# 繁體中文需求處理指南

## 需求分析架構
位於 [index.js](mdc:index.js) 的 `WebBitCodeGenerator` 類別專門處理繁體中文需求描述

## 關鍵詞檢測邏輯

### LED 矩陣顯示
- **圖形顯示**: "顯示"、"圖形"、"圖案" → 使用 `matrix()` API
- **跑馬燈**: "跑馬燈"、"滾動" → 使用 `scroll()` API  
- **全屏顯示**: "全部燈"、"全屏" → 使用 `showAll()` API
- **單燈控制**: "第X顆燈"、"燈號" → 使用 `show()` API

### 按鈕控制
- **按鈕A**: "按鈕A"、"A按鈕" → 使用 `btnA()` API
- **按鈕B**: "按鈕B"、"B按鈕" → 使用 `btnB()` API
- **同時按下**: "同時按"、"一起按"、"AB" → 組合判斷邏輯

### 感測器讀取
- **溫度**: "溫度"、"測溫" → 使用 `temp()` API
- **光度**: "光度"、"亮度"、"光線" → 使用 `leftLight()` / `rightLight()` API
- **濕度**: "濕度"、"DHT11" → 使用 `dht11()` API
- **距離**: "距離"、"超音波"、"測距" → 使用 `ultrasonic()` API
- **聲音**: "聲音"、"音量"、"聲音偵測" → 使用 `soundDetect()` API
- **震動**: "震動"、"震動偵測" → 使用 `vibration()` API

### 控制輸出
- **GPIO**: "腳位"、"輸出"、"控制" → 使用 `setPin()` / `readPin()` API
- **伺服馬達**: "馬達"、"轉動"、"角度"、"sg90" → 使用 `sg90()` API
- **音樂**: "音樂"、"播放"、"聲音" → 使用 `play()` API

### 網路通訊
- **MQTT**: "訂閱"、"傳送訊息"、"接收訊息"、"mqtt"、"網路"、"遠端"、"雲端" → 啟用 MQTT 功能

## 圖形名稱對照

### 表情符號
- "開心" / "笑" → "happy"
- "難過" / "哭" → "cry"

### 愛心圖案
- "愛心" / "心" → "heart_1" (預設)
- "愛心1" → "heart_1"
- "愛心2" → "heart_2"  
- "愛心3" → "heart_3"

### 方向指示
- "上" / "上箭頭" → "arrow_up"
- "下" / "下箭頭" → "arrow_down"
- "左" / "左箭頭" → "arrow_left"
- "右" / "右箭頭" → "arrow_right"

### 幾何圖形
- "星星" → "star"
- "圓形" → "circle"
- "正方形" → "square_1"
- "三角形" → "triangle_up"
- "菱形" → "diamond_1"

## 需求範例與對應邏輯

### 基礎範例
- "顯示開心圖案" → 使用 `matrix(100, 100, 100, "happy")`
- "按下按鈕A顯示愛心" → 按鈕檢測 + 圖形顯示組合
- "讀取溫度" → 使用 `temp()` + LED 顯示

### 複合功能範例  
- "按鈕控制馬達角度" → 按鈕檢測 + 伺服馬達控制
- "接收MQTT訊息並顯示" → MQTT 訂閱 + LED 矩陣顯示
- "溫度超過30度時播放警報" → 溫度感測 + 條件判斷 + 音樂播放

## 程式生成策略
1. **關鍵詞優先**: 優先匹配最具體的關鍵詞
2. **功能組合**: 自動組合多個相關功能
3. **預設行為**: 提供合理的預設參數和行為
4. **繁體中文註解**: 生成詳細的繁體中文程式註解
